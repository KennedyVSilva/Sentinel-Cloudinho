@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (!initialized)
{
    <div class="text-white p-6">Carregando painel...</div>
}
else
{
    <div class="min-h-screen bg-gray-900 text-white p-6">
        <h1 class="text-3xl font-bold mb-4">Sentinel do Cloudinho</h1>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                <h2 class="text-xl mb-2">Configuração do Teste</h2>
                <div class="mb-4">
                    <label class="block mb-1">Alvos (URL, IP ou Hostname, separados por vírgula)</label>
                    <input @bind="Targets" @oninput="ValidateTargets" class="w-full p-2 bg-gray-700 rounded @InvalidTargetsClass" placeholder="ex: https://example.com, 127.0.0.1" />
                    <span class="text-red-500 text-sm">@ValidationMessage</span>
                </div>
                <div class="mb-4">
                    <label class="block mb-1">Nível de Agressão</label>
                    <select @bind="AggressionLevel" class="w-full p-2 bg-gray-700 rounded">
                        <option value="low">Baixo</option>
                        <option value="medium">Médio</option>
                        <option value="high">Alto</option>
                    </select>
                </div>
                <button @onclick="StartTest" class="bg-blue-600 p-2 rounded hover:bg-blue-700 disabled:bg-gray-500" disabled="@( !TargetsValid )">Iniciar Teste</button>
            </div>
            <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                <h2 class="text-xl mb-2">Progresso</h2>
                <div class="w-full bg-gray-700 rounded-full h-4">
                    <div class="bg-blue-600 h-4 rounded-full transition-all duration-300" style="width: @Progress%"></div>
                </div>
                <p class="mt-2 text-sm">@LogText</p>
            </div>
        </div>

        <div class="mt-4 bg-gray-800 p-4 rounded-lg shadow-lg">
            <h2 class="text-xl mb-2">Resultados</h2>
            @foreach (var category in Results)
            {
                <div class="mb-4">
                    <h3 class="text-lg font-semibold">@category.Key</h3>
                    <table class="w-full text-left">
                        <thead>
                            <tr class="bg-gray-700">
                                <th class="p-2">Detalhe</th>
                                <th class="p-2">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in category.Value)
                            {
                                <tr class="border-t border-gray-600">
                                    <td class="p-2">@result.Detail</td>
                                    <td class="p-2 @(result.Status ? "text-green-500" : "text-red-500")">@(result.Status ? "Passou" : "Falhou")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <canvas id="securityChart" class="mt-4 max-w-full"></canvas>
            <button @onclick="ExportReport" class="bg-green-600 p-2 rounded hover:bg-green-700 mt-2">Exportar Relatório (JSON/PDF)</button>
        </div>
    </div>
}

@code {
    private string Targets { get; set; } = "";
    private string AggressionLevel { get; set; } = "medium";
    private double Progress { get; set; }
    private string LogText { get; set; } = "";
    private Dictionary<string, List<(string Detail, bool Status)>> Results { get; set; } = new();
    private bool TargetsValid { get; set; }
    private string InvalidTargetsClass => !TargetsValid ? "border-red-500" : "";
    private string ValidationMessage { get; set; } = "";
    private bool initialized = false;

    private void ValidateTargets()
    {
        var targets = Targets.Split(',').Select(t => t.Trim()).ToList();
        TargetsValid = targets.Any(t => IsValidTarget(t));
        ValidationMessage = TargetsValid ? "" : "Pelo menos um alvo válido é necessário (URL, IP ou hostname).";
    }

    private bool IsValidTarget(string target)
    {
        if (Uri.TryCreate(target, UriKind.Absolute, out var uri) && (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps))
            return true;
        if (System.Net.IPAddress.TryParse(target, out _))
            return true;
        if (!string.IsNullOrWhiteSpace(target) && target.Split('.').Length > 1)
            return true;
        return false;
    }

    private async Task StartTest()
    {
        var targets = Targets.Split(',').Select(t => t.Trim()).Where(t => IsValidTarget(t)).ToList();
        if (!targets.Any()) { LogText = "Nenhum alvo válido."; return; }

        Results.Clear();
        LogText = "Teste iniciado...";
        Progress = 0;

        var hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/testHub"))
            .Build();

        hubConnection.On<string, double, Dictionary<string, List<(string, bool)>>>("ReceiveUpdate", (log, progress, results) =>
        {
            LogText = log;
            Progress = progress;
            Results = results;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("StartPenTest", targets, AggressionLevel);
    }

    private async Task ExportReport()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(Results);
        var fileName = "sentinel_report.json";
        var bytes = System.Text.Encoding.UTF8.GetBytes(json);
        await JS.InvokeVoidAsync("downloadFile", fileName, bytes);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            initialized = true;
            StateHasChanged();
        }

        if (Results.Any())
        {
            var labels = Results.Keys.ToArray();
            var data = Results.Values.SelectMany(v => v.Select(r => r.Status ? 1 : 0)).ToArray();
            await JS.InvokeVoidAsync("initializeChart", "securityChart", labels, data);
        }
    }
}
